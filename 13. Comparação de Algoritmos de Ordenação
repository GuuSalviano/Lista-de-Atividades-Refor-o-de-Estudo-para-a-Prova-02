#include <iostream>
#include <vector>
#include <chrono>
#include <cstdlib>
#include <algorithm>

using namespace std;
using namespace std::chrono;

// Contador de comparações
int comparisons = 0;

// Função para resetar o contador
void resetComparisons() {
    comparisons = 0;
}

// Função de Shell Sort
void shellSort(vector<int>& arr) {
    int n = arr.size();
    for (int gap = n / 2; gap > 0; gap /= 2) {
        for (int i = gap; i < n; i++) {
            int temp = arr[i];
            int j;
            for (j = i; j >= gap && arr[j - gap] > temp; j -= gap) {
                arr[j] = arr[j - gap];
                comparisons++;
            }
            arr[j] = temp;
            comparisons++;
        }
    }
}

// Função de Merge Sort
void merge(vector<int>& arr, int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    vector<int> L(n1), R(n2);

    for (int i = 0; i < n1; i++) L[i] = arr[left + i];
    for (int j = 0; j < n2; j++) R[j] = arr[mid + 1 + j];

    int i = 0, j = 0, k = left;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k++] = L[i++];
        } else {
            arr[k++] = R[j++];
        }
        comparisons++;
    }

    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

void mergeSort(vector<int>& arr, int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);
        merge(arr, left, mid, right);
    }
}

// Função de Selection Sort
void selectionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; i++) {
        int minIndex = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[minIndex]) {
                minIndex = j;
            }
            comparisons++;
        }
        swap(arr[i], arr[minIndex]);
    }
}

// Função de Quick Sort
int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j < high; j++) {
        if (arr[j] <= pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
        comparisons++;
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

void quickSort(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);

        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

// Função de Bucket Sort
void bucketSort(vector<int>& arr) {
    int n = arr.size();
    if (n <= 1) return;

    int maxElement = *max_element(arr.begin(), arr.end());
    int bucketCount = n;

    vector<vector<int>> buckets(bucketCount);

    for (int i = 0; i < n; i++) {
        int bucketIndex = (arr[i] * bucketCount) / (maxElement + 1);
        buckets[bucketIndex].push_back(arr[i]);
    }

    for (int i = 0; i < bucketCount; i++) {
        sort(buckets[i].begin(), buckets[i].end());
        comparisons += buckets[i].size();
    }

    int index = 0;
    for (int i = 0; i < bucketCount; i++) {
        for (int j = 0; j < buckets[i].size(); j++) {
            arr[index++] = buckets[i][j];
        }
    }
}

// Função de Radix Sort
void countingSortForRadix(vector<int>& arr, int exp) {
    int n = arr.size();
    vector<int> output(n);
    int count[10] = {0};

    for (int i = 0; i < n; i++) {
        count[(arr[i] / exp) % 10]++;
    }

    for (int i = 1; i < 10; i++) {
        count[i] += count[i - 1];
    }

    for (int i = n - 1; i >= 0; i--) {
        output[count[(arr[i] / exp) % 10] - 1] = arr[i];
        count[(arr[i] / exp) % 10]--;
    }

    for (int i = 0; i < n; i++) {
        arr[i] = output[i];
    }
}

void radixSort(vector<int>& arr) {
    int maxElement = *max_element(arr.begin(), arr.end());

    for (int exp = 1; maxElement / exp > 0; exp *= 10) {
        countingSortForRadix(arr, exp);
    }
}

// Função para medir o tempo de execução
template <typename Func>
void measureExecutionTime(vector<int>& arr, Func sortFunction, const string& name) {
    vector<int> temp = arr;
    resetComparisons();
    auto start = high_resolution_clock::now();
    sortFunction(temp);
    auto end = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(end - start);
    cout << name << " - Tempo: " << duration.count() << " microsegundos, Comparações: " << comparisons << endl;
}

int main() {
    vector<int> arr = {4, 2, 7, 3, 1, 5, 9, 6, 8, 0};

    // Shell Sort
    measureExecutionTime(arr, shellSort, "Shell Sort");

    // Merge Sort
    measureExecutionTime(arr, [](vector<int>& arr) { mergeSort(arr, 0, arr.size() - 1); }, "Merge Sort");

    // Selection Sort
    measureExecutionTime(arr, selectionSort, "Selection Sort");

    // Quick Sort
    measureExecutionTime(arr, [](vector<int>& arr) { quickSort(arr, 0, arr.size() - 1); }, "Quick Sort");

    // Bucket Sort
    measureExecutionTime(arr, bucketSort, "Bucket Sort");

    // Radix Sort
    measureExecutionTime(arr, radixSort, "Radix Sort");

    return 0;
}
