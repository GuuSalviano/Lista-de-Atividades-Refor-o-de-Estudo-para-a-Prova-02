def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        left_half = arr[:mid]
        right_half = arr[mid:]

        merge_sort(left_half)
        merge_sort(right_half)

        i = j = k = 0
        while i < len(left_half) and j < len(right_half):
            if left_half[i] < right_half[j]:
                arr[k] = left_half[i]
                i += 1
            else:
                arr[k] = right_half[j]
                j += 1
            k += 1

        while i < len(left_half):
            arr[k] = left_half[i]
            i += 1
            k += 1

        while j < len(right_half):
            arr[k] = right_half[j]
            j += 1
            k += 1

# Exemplo de uso com palavras
arr_merge = ["banana", "apple", "orange", "mango", "grape"]
merge_sort(arr_merge)
print("Merge Sort (alfabético):", arr_merge)

def partition(arr, low, high):
    pivot = arr[high]
    i = low - 1
    for j in range(low, high):
        if arr[j] <= pivot:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]
    arr[i + 1], arr[high] = arr[high], arr[i + 1]
    return i + 1

def quick_sort(arr, low, high):
    if low < high:
        pi = partition(arr, low, high)
        quick_sort(arr, low, pi - 1)
        quick_sort(arr, pi + 1, high)

# Exemplo de uso com palavras
arr_quick = ["banana", "apple", "orange", "mango", "grape"]
quick_sort(arr_quick, 0, len(arr_quick) - 1)
print("Quick Sort (alfabético):", arr_quick)


def binary_search(arr, left, right, x):
    while left <= right:
        mid = left + (right - left) // 2

        # Verifica se x está presente no meio
        if arr[mid] == x:
            return mid

        # Se x é maior, ignore a metade esquerda
        elif arr[mid] < x:
            left = mid + 1

        # Se x é menor, ignore a metade direita
        else:
            right = mid - 1

    # Elemento não está presente na lista
    return -1

# Exemplo de uso
arr = ["apple", "banana", "cherry", "date", "fig", "grape"]
x = "cherry"

result = binary_search(arr, 0, len(arr) - 1, x)

if result != -1:
    print(f"'{x}' encontrado no índice {result}")
else:
    print(f"'{x}' não encontrado na lista")



